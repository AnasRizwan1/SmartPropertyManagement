CREATE TABLE Customer (
    CNIC VARCHAR(20),
    fName VARCHAR(50),
    lName VARCHAR(50),
    customerAddress VARCHAR(255),
    registrationDate DATE,
    CONSTRAINT pk_Customer PRIMARY KEY (CNIC)
);

CREATE TABLE Plot (
    plotNo INT AUTO_INCREMENT,
    area DECIMAL(10,2),
    price DECIMAL(12,2),
    type VARCHAR(30),
    status ENUM('owned', 'unowned', 'incomplete'),
    plotAddress VARCHAR(255),
    CNIC VARCHAR(20),
    CONSTRAINT pk_Plot PRIMARY KEY (plotNo),
    CONSTRAINT fk_Plot_CNIC FOREIGN KEY (CNIC) REFERENCES Customer(CNIC)
);

CREATE TABLE Contacts (
    CNIC VARCHAR(20),
    phoneNo VARCHAR(15),
    CONSTRAINT pk_Contacts PRIMARY KEY (CNIC, phoneNo),
    CONSTRAINT fk_Contacts_CNIC FOREIGN KEY (CNIC) REFERENCES Customer(CNIC)
);

CREATE TABLE PlotTransfer (
    transferID INT AUTO_INCREMENT,
    plotNo INT,
    ownerNo INT,
    buyerCNIC VARCHAR(20),
    sellerCNIC VARCHAR(20),
    transferDate DATE,
    CONSTRAINT pk_PlotTransfer PRIMARY KEY (transferID),
    CONSTRAINT fk_PlotTransfer_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo),
    CONSTRAINT fk_PlotTransfer_buyerCNIC FOREIGN KEY (buyerCNIC) REFERENCES Customer(CNIC),
    CONSTRAINT fk_PlotTransfer_sellerCNIC FOREIGN KEY (sellerCNIC) REFERENCES Customer(CNIC)
);

CREATE TABLE PlotReturn (
    returnID INT AUTO_INCREMENT,
    plotNo INT,
    returnedAmount DECIMAL(12,2),
    returnDate DATE,
    CONSTRAINT pk_PlotReturn PRIMARY KEY (returnID),
    CONSTRAINT fk_PlotReturn_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo)
);

CREATE TABLE Payment (
    paymentID INT AUTO_INCREMENT,
    amount DECIMAL(12,2),
    receivingDate DATE,
    plotNo INT,
    CONSTRAINT pk_Payment PRIMARY KEY (paymentID),
    CONSTRAINT fk_Payment_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo)
);

CREATE TABLE Advance (
    paymentID INT,
    currentPaidAmount DECIMAL(12,2),
    CONSTRAINT pk_Advance PRIMARY KEY (paymentID),
    CONSTRAINT fk_Advance_paymentID FOREIGN KEY (paymentID) REFERENCES Payment(paymentID)
);

CREATE TABLE Installment (
    paymentID INT,
    installmentNo INT,
    CONSTRAINT pk_Installment PRIMARY KEY (paymentID),
    CONSTRAINT fk_Installment_paymentID FOREIGN KEY (paymentID) REFERENCES Payment(paymentID)
);

CREATE TABLE InstallmentDetails (
    plotNo INT,
    installmentNo INT,
    dueDate DATE,
    lateStatus ENUM('paid', 'unpaid', 'latePaid', 'lateUnpaid'),
    CONSTRAINT pk_InstallmentDetails PRIMARY KEY (plotNo, installmentNo),
    CONSTRAINT fk_InstallmentDetails_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo)
);

CREATE TABLE Plan (
    planID INT AUTO_INCREMENT,
    plotNo INT,
    installmentPlan VARCHAR(100),
    CONSTRAINT pk_Plan PRIMARY KEY (planID),
    CONSTRAINT fk_Plan_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo)
);

CREATE TABLE Fine (
    plotNo INT,
    installmentNo INT,
    shortAmount DECIMAL(10,2),
    finePercentage DECIMAL(5,2),
    CONSTRAINT pk_Fine PRIMARY KEY (plotNo, installmentNo),
    CONSTRAINT fk_Fine_plotNo FOREIGN KEY (plotNo) REFERENCES Plot(plotNo)
);

CREATE TABLE Heads (
    headID INT AUTO_INCREMENT,
    head VARCHAR(50),
    type ENUM('income', 'expense'),
    CONSTRAINT pk_Heads PRIMARY KEY (headID)
);

CREATE TABLE Expenses (
    expenseID INT AUTO_INCREMENT,
    date DATE,
    headID INT,
    amount DECIMAL(12,2),
    CONSTRAINT pk_Expenses PRIMARY KEY (expenseID),
    CONSTRAINT fk_Expenses_headID FOREIGN KEY (headID) REFERENCES Heads(headID)
);

CREATE TABLE Income (
    incomeID INT AUTO_INCREMENT,
    date DATE,
    headID INT,
    amount DECIMAL(12,2),
    CONSTRAINT pk_Income PRIMARY KEY (incomeID),
    CONSTRAINT fk_Income_headID FOREIGN KEY (headID) REFERENCES Heads(headID)
);

DELIMITER $
CREATE PROCEDURE AddAdvance(IN PlotNo INT, IN PaidAmount INT, IN ReceivingDate DATE)
BEGIN
	INSERT INTO Payment(amount, receivingDate, plotNo)
    VALUES((Select price from plot WHERE plotNo = PlotNo), receivingDate, plotNo);
    INSERT INTO Advance
    VALUES(last_insert_id(), PaidAmount);
END $
CREATE PROCEDURE AddCustomer(IN InCNIC VARCHAR(20), IN FName VARCHAR(50), IN LName VARCHAR(50), IN Address VARCHAR(255), IN RegistrationDate DATE, IN PhoneNo1 VARCHAR(15), IN PhoneNo2 VARCHAR(15))
BEGIN
	INSERT INTO Customer
    VALUES(InCNIC, FName, LName, Address, RegistrationDate);
    INSERT INTO Contacts
    VALUES(InCNIC, PhoneNo1);
    IF PhoneNo2 != NULL THEN
		INSERT INTO Contacts
        VALUES(InCNIC, PhoneNo2);
	END IF;
END $
CREATE PROCEDURE AddHead(In Head VARCHAR(50), IN Type ENUM('income', 'expense'))
BEGIN
	INSERT INTO Heads
    VALUES(Head, Type);
END $
DELIMITER ;

